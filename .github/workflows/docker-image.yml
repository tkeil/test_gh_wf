name: Docker Image CI

on:
  push:
    branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

    inputs:
      changelog:
        description: "changelog"
        default: "- ddd"
        type: "string"
        required: true
      publish_artifacts:
        description: 'Publish artifacts'
        required: true
        default: 'false'
        type: boolean
      rel_type:
        type: choice
        description: Select type of release
        required: true
        default: 'dev'
        options:
          - dev
          - release
      test_number:
        type: number
        description: Select type of release
        default: 1
        required: true
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true

jobs:

  checkout-test:

#    runs-on: ubuntu-latest
    runs-on: self-hosted

    steps:
    - id: env_info
      name: env_info
      run: |
        echo "GITHUB_ACTOR:      {{ GITHUB_ACTOR }}"
        echo "GITHUB_BASE_REF:   {{ GITHUB_BASE_REF }}"
        echo "GITHUB_JOB:        {{ GITHUB_JOB }}"
        echo "GITHUB_RUN_ID:     {{ GITHUB_RUN_ID }}"
        echo "GITHUB_RUN_NUMBER: {{ GITHUB_RUN_NUMBER }}"
        echo "RUNNER_NAME:       {{ RUNNER_NAME }}"
        echo "GITHUB_SHA:        {{ GITHUB_SHA }}"
    - id: checkout-private
      name: Checkout - Private
      run: |
        the_secret=$((RANDOM))
        echo "{secret-number}={$the_secret}" >> $GITHUB_OUTPUT
        echo "{name}={value}" >> $GITHUB_STATE

#        echo "::add-mask::$the_secret"

    - id: checkout-private2
      name: Checkout - Private2
      run: |
        date
        date -u
        pwd
        ls -al
        echo "the secret number is ${{ steps.sets-a-secret.outputs.secret-number }}"
        rm -rf asvsam-installer
        git clone https://github.com/asvsam/asvsam-installer.git
        ls -al
        find .
        env

        echo "GIT:"
        echo "=========="
        GIT_REF=$(cd asvsam-installer; git rev-parse HEAD)
        echo "GIT_REF:         ${GIT_REF}"
        GIT_REF_SHORT=$(cd asvsam-installer; git rev-parse HEAD | sed 's/\(........\).*/\1/')
        echo "GIT_REF_SHORT:   ${GIT_REF_SHORT}"
        # asvsam_20210820/refs/heads/master/36d5c471c6933e2f66b6041e8bfe98027922366b
        GIT_REF_FULLTEXT=$(echo "ddddd ${GIT_REF}")
        echo "GIT_REF_FULLTEXT: ${GIT_REF_FULLTEXT}"

        echo "TIME:"
        echo "=========="
        NOW_UNIXTIME=$(date +%s)
        echo "NOW_UNIXTIME:    ${NOW_UNIXTIME}"
        NOW=$(date +"%Y-%m-%d_%H-%M_%S_%N" -d "@${NOW_UNIXTIME}")
        echo "NOW:             ${NOW}"
        NOW_RFC3339=$(date -u +'%Y-%m-%dT%H:%M:%SZ' -d "@${NOW_UNIXTIME}")
        echo "NOW_RFC3339:     ${NOW_RFC3339}"
        NOW_SHORT=$(date +"%y%m%d-%H%M" -d "@${NOW_UNIXTIME}")
        echo "NOW_SHORT:       ${NOW_SHORT}"

        echo "VERSION:"
        echo "=========="
        VERSION_BASE=1.0
        echo "VERSION_BASE:    ${VERSION_BASE}"
        RUN_NUMBER=${GITHUB_RUN_NUMBER}
        echo "RUN_NUMBER:      ${RUN_NUMBER}"
        VERSION=${VERSION_BASE}.${RUN_NUMBER}
        echo "VERSION:         ${VERSION}"
        VERSION_FULL=${VERSION}-${NOW_SHORT}-${GIT_REF_SHORT}
        echo "VERSION_FULL:    ${VERSION_FULL}"
        VERSION_GUI=${VERSION_FULL} $(echo \(${RELEASE_TYPE}\) | tr '[:lower:]' '[:upper:]')
        echo "VERSION_GUI:     ${VERSION_GUI}"

        echo "DOCKER:"
        echo "=========="
        DOCKER_CONTAINER_TAGS=${VERSION_BASE},${VERSION_FULL},${RELEASE_TYPE},latest-${RELEASE_TYPE}
        echo "DOCKER_CONTAINER_TAGS:    ${DOCKER_CONTAINER_TAGS}"
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        RELEASE_TYPE: ${{ github.event.inputs.rel_type }}
#      run: echo "${{ secrets.DOCKERHUB_USERNAME }}" > ddd;cat ddd; ls -al ddd;git clone https://github.com/asvsam/asvsam-installer.git;ls -al; find asvsam-installer

  build:
    needs: checkout-test
    runs-on: self-hosted
    # Approval Step
    environment: Release

    steps:
    -
      name: Checkout
      uses: actions/checkout@v3

#     -
#       name: Build the Docker image
#       run: docker build . --file Dockerfile --tag debian-builder:$(date +%s)

    -
      name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    -
      name: Run shell command
      run: pwd; id; hostname; ls -al; echo $DOCKERHUB_USERNAME; echo ${{ secrets.DOCKERHUB_USERNAME }}; echo ${{ inputs.changelog }}; echo "${{ github.event.inputs.publish_artifacts }} __"
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

    - name: Configure GPG Key
      run: . ./build_helper.sh; config_gpg
      env:
        GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}

    -
      name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/debian-builder:latest

    - if: github.event.inputs.publish_artifacts == 'true'
      name: Publish Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: build/web
